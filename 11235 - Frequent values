#include<bits/stdc++.h>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<ll> vll;

#define PI (2*acos(0.0))
#define eps 1e-9
#define pb push_back
#define endl "\n"
#define watch(x) cout << (#x) << " is " << (x) << endl;
#define show(v) for(int fi = 0; fi < v.size(); fi++) cout << v[fi] << " "; cout << endl;
#define showpair(v) for(int fi = 0; fi < v.size(); fi++) cout << v[fi].first << " " << v[fi].second << endl;
#define ff first
#define ss second
#define fu cout << "lol" << endl;
#define precision(n) cout << fixed << setprecision(n);
#define lb lower_bound
#define up upper_bound
#define vscan for(i = 0;i<n;i++){cin>>in; v.pb(in);}
#define all(a) a.begin(), a.end()
#define min3(a,b,c) min(a,min(b,c))
#define max3(a,b,c) max(a,max(b,c))
#define mem(a,val) memset(a,val,sizeof(a))
#define loop(i,n) for(i = 0; i < n; i++)
#define TC() ull T; cin>>T; while(T--)
#define IN(x) {scanf("%d",&x);}
#define LL(x) {scanf("%lld",&x);}
#define CC(x) {scanf("%c",&x);}
#define pfl(x) printf("%d\n",x)
#define pfll(x) printf("%lld\n",x)
#define newl puts("")
#define space printf(" ")
#define MOD 1000000007
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
#define left node*2
#define right node*2+1

struct st{
    int lval, lf, mval, mf, rval, rf;
};

const int N = 1e5+10;
vi v(N);
vector<st> tree(4*N);

st merge(st a, st b){
    st ret;
    ret.lval = a.lval;
    if(a.lval == b.lval) ret.lf = a.lf + b.lf;
    else ret.lf = a.lf;
    int x = a.mf;
    int y = b.mf;
    int z = 0;
    if(a.rval == b.lval) z = a.rf + b.lf;
    if(max3(x,y,z) == x){
        ret.mval = a.mval;
        ret.mf = x;
    }
    else if(max3(x,y,z) == y){
        ret.mval = b.mval;
        ret.mf = y;
    }
    else{
        ret.mval = a.rval;
        ret.mf = z;
    }
    ret.rval = b.rval;
    if(a.rval == b.rval) ret.rf = a.rf + b.rf;
    else ret.rf = b.rf;
    return ret;
}

void build(int node, int l, int r){
    if(l == r){
        tree[node].lval = tree[node].rval = tree[node].mval = v[l];
        tree[node].lf = tree[node].rf = tree[node].mf = 1;
        return;
    }
    int mid = l + r >> 1;
    build(left, l, mid);
    build(right, mid+1, r);
    tree[node] = merge(tree[left], tree[right]);
}

st query(int node, int l, int r, int x, int y){
    if(l > y || r < x){
        st ret;
        ret.lf = ret.mf = ret.rf = 0;
        return ret;
    }
    if(l == x && r == y){
        return tree[node];
    }
    int mid = l + r >> 1;
    return merge(query(left, l, mid, x, min(y,mid)), query(right, mid+1, r, max(x,mid+1), y));
}

int main()
{
    int i = 0, j = 0, cs = 0, in;
    int n;
    while(cin>>n, n != 0){
        int q; cin>>q;
        for(i = 0; i < n; i++) cin>>v[i];
        build(1,0,n-1);
        for(i = 0; i < q; i++){
            int l, r; cin>>l>>r; l--,r--;
            cout << query(1, 0, n-1, l, r).mf << endl;
        }
    }
    return 0;
}
