#include<bits/stdc++.h>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<ll> vll;

#define PI (2*acos(0.0))
#define eps 1e-9
#define pb push_back
#define endl "\n"
#define watch(x) cout << (#x) << " is " << (x) << endl;
#define show(v) for(int fi = 0; fi < v.size(); fi++) cout << v[fi] << " "; cout << endl;
#define showpair(v) for(int fi = 0; fi < v.size(); fi++) cout << v[fi].first << " " << v[fi].second << endl;
#define ff first
#define ss second
#define fu cout << "lol" << endl;
#define precision(n) cout << fixed << setprecision(n);
#define lb lower_bound
#define up upper_bound
#define vscan for(i = 0;i<n;i++){cin>>in; v.pb(in);}
#define all(a) a.begin(), a.end()
#define min3(a,b,c) min(a,min(b,c))
#define max3(a,b,c) max(a,max(b,c))
#define mem(a,val) memset(a,val,sizeof(a))
#define loop(i,n) for(i = 0; i < n; i++)
#define TC() ull T; cin>>T; while(T--)
#define IN(x) {scanf("%d",&x);}
#define LL(x) {scanf("%lld",&x);}
#define CC(x) {scanf("%c",&x);}
#define pfl(x) printf("%d\n",x)
#define pfll(x) printf("%lld\n",x)
#define newl puts("")
#define space printf(" ")
#define MOD 1000000007
#define speed ios_base::sync_with_stdio(false); cin.tie(NULL);
#define left node*2
#define right node*2+1

const int N = 2e6;
string s;
vi tree(4*N);
vi arr(4*N);

void push(int node, int l, int r){
    int mid = l + r >> 1;
    if(arr[node] == 1){
        arr[left] = arr[right] = 1;
        tree[left] = mid - l + 1, tree[right] = r - mid;
    }
    else if(arr[node] == 2){
        arr[left] = arr[right] = 2;
        tree[left] = tree[right] = 0;
    }
    else if(arr[node] == 3){
        if(arr[left] == 1) arr[left] = 2, tree[left] = 0;
        else if(arr[left] == 2) arr[left] = 1, tree[left] = mid - l + 1;
        else if(arr[left] == 3) arr[left] = 0, tree[left] = mid - l + 1 - tree[left];
        else arr[left] = 3, tree[left] = mid - l + 1 - tree[left];
        if(arr[right] == 1) arr[right] = 2, tree[right] = 0;
        else if(arr[right] == 2) arr[right] = 1, tree[right] = r - mid;
        else if(arr[right] == 3) arr[right] = 0, tree[right] = r - mid - tree[right];
        else arr[right] = 3, tree[right] = r - mid - tree[right];
    }
    arr[node] = 0;
}

void build(int node, int l, int r){
    arr[node] = 0;
    if(l == r){
        tree[node] = s[l]-48;
        return;
    }
    int mid = l + r >> 1;
    build(left, l, mid);
    build(right, mid+1,r);
    tree[node] = tree[left] + tree[right];
}

void upd(int node, int l, int r, int x, int y, int type){
    if(x > r || y < l) return;
    if(x == l && y == r){
        if(type == 1) arr[node] = 1, tree[node] = r - l + 1;
        if(type == 2) arr[node] = 2, tree[node] = 0;
        if(type == 3){
            if(arr[node] == 1) arr[node] = 2, tree[node] = 0;
            else if(arr[node] == 2) arr[node] = 1, tree[node] = r - l + 1;
            else if(arr[node] == 3) arr[node] = 0, tree[node] = r - l + 1 - tree[node];
            else if(arr[node] == 0) arr[node] = 3, tree[node] = r - l + 1 - tree[node];
        }
        return;
    }
    int mid = l + r >> 1;
    push(node, l, r);
    upd(left, l, mid, x, min(y,mid), type);
    upd(right, mid+1, r, max(x,mid+1), y, type);
    tree[node] = tree[left] + tree[right];
}

int query(int node, int l, int r, int x, int y){
    if(x > r || y < l) return 0;
    if(x == l && y == r) return tree[node];
    int mid = l + r >> 1;
    push(node,l,r);
    int ret = query(left, l, mid, x, min(y, mid)) + query(right, mid+1, r, max(x, mid+1), y);
    tree[node] = tree[left] + tree[right];
    return ret;
}

int main()
{
    int i = 0, j = 0, cs = 0, in;
    TC(){
        s.clear();
        int m; cin>>m;
        while(m--){
            int a; cin>>a;
            string b; cin>>b;
            while(a--) s += b;
        }
        int q; cin>>q;
        int sz = s.size()-1;
        build(1,0,sz);
        int num = 0;
        cout << "Case " << ++cs << ":" << endl;
        while(q--){
            char a; int b, c; cin>>a>>b>>c;
            if(a == 'F') upd(1, 0, sz, b, c, 1);
            if(a == 'E') upd(1, 0, sz, b, c, 2);
            if(a == 'I') upd(1, 0, sz, b, c, 3);
            if(a == 'S') cout << "Q" << ++num << ": " << query(1, 0, sz, b, c) << endl;
        }
    }
    return 0;
}
